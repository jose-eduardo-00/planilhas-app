generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  senha         String
  verify        Boolean  @default(false)
  nivel         Int      @default(2)
  status        Boolean  @default(true)
  origin        Int      @default(1)
  avatar        String
  renda_mensal  Decimal  @db.Decimal(10, 2)
  salario       Decimal  @db.Decimal(10, 2)
  outras_fontes Decimal  @db.Decimal(10, 2)
  expoToken     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Code                  Code[]
  Auth                  Auth[]
  Planilha              Planilha[]
  NotificacoesEnviadas  Notificacao[]
  NotificacoesRecebidas NotificacaoUser[]
}

model Code {
  id        String   @id @default(uuid())
  userId    String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auth {
  id          String   @id @default(uuid())
  userId      String   @unique
  token       String?  @db.Text
  last_access Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Planilha {
  id           String          @id @default(uuid())
  nome         String
  descricao    String?
  userId       String
  renda_mensal Decimal         @db.Decimal(10, 2)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  linhas       LinhaPlanilha[]

  @@index([userId])
}

model LinhaPlanilha {
  id         String   @id @default(uuid())
  nome       String
  tipo       String
  data       DateTime
  valor      Decimal  @db.Decimal(10, 2)
  color      String   @default("#ffffff")
  planilhaId String
  planilha   Planilha @relation(fields: [planilhaId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([planilhaId])
}

model Notificacao {
  id        String    @id @default(uuid())
  nome      String
  texto     String
  userId    String
  validade  DateTime?
  platform  Int       @default(3) // 1: Web, 2: Mobile, 3: Ambos 
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  notificacoesUsuarios NotificacaoUser[]
}

model NotificacaoUser {
  id            String   @id @default(uuid())
  notificacaoId String
  userId        String
  visualizado   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  notificacao Notificacao @relation(fields: [notificacaoId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notificacaoId])
  @@index([userId])
}
